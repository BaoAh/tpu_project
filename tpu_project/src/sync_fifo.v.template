`ifndef SYNC_FIFO_SV
`define SYNC_FIFO_SV

module sync_fifo #(
    parameter DEPTH = 8,
    parameter WIDTH = 16
) (
    input               clk,
    input 			rst,
    // Supplier side 
    input               w_en,
    input   [WIDTH-1:0] data_in,
    output              full,
    // Consumer side
    input               r_en,
    output  [WIDTH-1:0] data_out,
    output              empty
);

  reg [DEPTH-1:0] w_ptr, r_ptr;
  reg [WIDTH-1:0] fifo [DEPTH-1:0];

   assign  data_out = fifo[r_ptr];
  // Set Default values on reset.
  always @(posedge clk) begin
    if (!rst) begin
      w_ptr <= 0;
      r_ptr <= 0;
    end
  end

  // To write data to FIFO
  always @(posedge clk) begin
    if (w_en & !full) begin
      data_out <= fifo[r_ptr];
	  fifo[w_ptr] <= data_in;
      w_ptr <= w_ptr + 1;
    end
  end

  // To read data from FIFO
  always @(posedge clk) begin
    if (r_en & !empty) begin
      r_ptr <= r_ptr + 1;
    end
  end

  assign full  = ((w_ptr + 1'b1) == r_ptr);
  assign empty = (w_ptr == r_ptr);
endmodule

`endif
